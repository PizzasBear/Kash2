1 + 2 * -3 - - 5 == 4 && false
# class MonoidInt {
#     n: int
#     new() {
#         f
#     }
# }
# 
# constraint monoid(T type) {
#     T: mul
#     T.one: fn() T
# }
# 
# fn power[T type + monoid](x T, p int) int {
#     var result = T.one()
#     while p {
#         if p & 1 {
#             result *= x
#         }
#         x *= x
#         p /= 2
#     }
#     result
# }
# 
# power(5, 6)
